#!/bin/bash

which az > /dev/null 2>&1 || { echo "'az' must be in your PATH" ; exit 1  ; }

export RETRYONFAIL=1
export PATH=$PATH:$PWD
. .demoscript

set -e

# Make sure you set these appropriately and create your RG, Sub, and ACA
# environment in advance
RG=default
SUB=fe108f6a-2bd6-409c-8bfb-8f21dbb7ba0a
LOC="'East US'"
ENV=demo

comment --nolf "Demo assumes you have an ACA env ('$ENV') already created"
comment "and you've set the RG,SUB,LOC,ENV values in this file correctly"
comment --pauseafter "Press any key when ready"
clear
# comment "MUST have 'az' in your PATH for auth purposes"

comment --nolf "Challenges:"
comment --nolf "- can we hide IaC (eg ARM/Bicep) from the dev but still"
comment --nolf "  allow them to use IaC as part of their gitOps flow?"
comment --nolf "- can we offer a simplified CLI UX (eg az-like) for azd"
comment --nolf "  when the user wants to create/edit their IaC?"
comment --nolf "- can we offer an 'escape hatch' to the IaC for the very"
comment --nolf "  advanced use cases where they need to edit IaC manually?"
comment --nolf "- dealing with edits made outside of local azd/IaC (drift)"
comment --nolf ""
comment --nolf "Solution Summary:"
comment --nolf "- support az-like syntax on azd CLI"
comment --nolf "- map those requests to edits of local IaC files"
comment --nolf "- local IaC files only include data user has provided"
comment --nolf "- local IaC will be augmented with smart/required defaults"
comment --nolf "  prior to being sent to Azure"
comment --nolf "- local IaC files are based on official Azure IaC, so, when"
comment --nolf "  needed, user can edit them directly for advanced features"
comment --nolf "  without learning (yet another) IaC format"
comment --nolf "- drift is solved via diff/sync commands (think 'git rebase')"
comment --pauseafter ""
clear

comment --nolf "Demo part 1: IaC management w/o seeing IaC directly"
comment --nolf "- scenario: from scratch, create ACA app + dev-mode Redis"
comment --nolf "- use a clean dir to show we're not cheating"
comment        "- PoC uses REST/JSON instead of Bicep just for convenience"
rm -rf testDir1
doit mkdir testDir1
doit cd testDir1
cd testDir1

comment "Init project with rg, sub and loc"
doit --noscroll azx init -g "$RG" -s "$SUB" -l "$LOC"
comment "Create a redis dev-mode service (our ACA env '$ENV' already exists)"
doit azx add aca-redis -n redis1 --environment "$ENV"

comment "Create an ACA app from existing image & externalized & bind to redis"
doit azx add aca-app -n app1 -i duglin/aca-lister --external --bind redis1

comment --nolf "Some things to note"
comment --nolf "- No IaC exposed during the creation of a new resource"
comment --nolf "- CLI UX is az-like"
comment        "- IaC is created on disk, nothing is in Azure yet"

comment "If user ever needs access to IaC, they can find it under .azx dir"
doit ls .azx/stage_default

# doit azx list

comment "When 'show'ing a resource, can see 'human' or 'machine' readable"
doit azx show aca-app -n app1 "    # Human readable"
doit azx show aca-app -n app1 -o json "    # Machine readable"
comment --nolf "Notice the only 'values' shown are what the user has provided."
comment "Not cluttered with info they haven't expressed an interest in, yet"

comment --nolf "Everything is still local, so provision it in Azure now."
comment        "Notice redis goes first because the app depends on it"
doit azx up

comment --nolf "When 'show'ing a resource, can see IaC(above), REST (IaC+defaults),"
comment        "or what's in Azure. In 'human' or 'machine' readable."
doit azx show aca-app -n app1 --from rest "       # Human readable + defaults"
comment "Notice it has fields that azx filled in automatically for the user"
comment "Now look at what's in Azure in JSON instead of human readable"
doit azx show aca-app -n app1 --from azure -o json "  # Machine readable from Azure"

# comment "Imagine we pushed to github. Simulate clone+deploy to recreate"
# comment "First, de-provision everything in Azure"
# doit azx down --wait

# comment "Now bring it all back up"
# doit azx up

comment --nolf "Demo part 2: Dealing with IaC 'drift'"
comment "- Changes are made in Azure that our local IaC doesn't know about"

comment "Change something locally : remove the binding"
doit azx update aca-app -n app1 --unbind redis1

comment "Change something in Azure : add an environment variable, set max scale"
doit --noscroll az containerapp update -n app1 --set-env-vars abc=def --max-replicas=9

comment --nolf "We now have 'drift', Azure != local IaC. Show the diff."
doit azx diff aca-app/app1

comment "Notice:"
comment "- it shows it in the context of the human readable output."
comment '- "Max Scale: 10" wasn't set by the user, it's a default value'
comment ""
comment --nolf "We can now resolve the diffs via the 'sync' command."
comment "Accept Azure changes(new env var,scale), and reject Azure's old bind"
doit --noscroll azx sync aca-app/app1

comment --nolf "Doing a diff still shows the local 'unbind' because we haven't"
comment "provisioned back to Azure yet"
doit azx diff aca-app/app1

comment "So... push it to Azure"
doit azx up

comment "Now the diff is empty!"
doit azx diff aca-app/app1

comment --nolf "Demo part 3: Breadcumbs..."
comment --nolf "- Use the CLI like 'az' but save results in local IaC as we go"
comment "- Same basic idea but avoids the manual 'up' action after each step"

comment "Update the env var locally AND immediately in Azure"
doit azx update aca-app -n app1 --env abc=DEF --up

comment "Prove it's in Azure"
doit azx show aca-app -n app1 --from azure

comment "Turn on auto-provision because I'm getting lazy"
doit azx config set defaults.up=true

comment "Now re-bind to redis, happens locally and in Azure"
doit azx update aca-app -n app1 --bind redis1

comment "Prove it's locally too"
doit azx show aca-app -n app1

comment --nolf "This allows a user, who doesn't immediately care about IaC, to "
comment --nolf "use an AZ-like CLI to interatively construct their app's "
comment --nolf "config and then save the results in github by saving the "
comment --nolf "auto-generated IaC files."
comment --nolf "They don't need to 'remember' all of the things they set and"
comment --pauseafter "recreate the uber AZ-like command or IaC files"

comment "Clean up"
doit azx down

cd ..
rm -f out cmds
